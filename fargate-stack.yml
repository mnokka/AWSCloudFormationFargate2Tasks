AWSTemplateFormatVersion: '2010-09-09'
Description: Fargate Cluster with basic VPC, IAM, and ECS resources for Flask + Redis

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: FargateVPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      Tags:
        - Key: Name
          Value: PublicSubnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: FlaskRedisCluster

  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: ecsTaskExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  FlaskTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: flask-redis-task
      ExecutionRoleArn: !Ref TaskExecutionRole
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "1024"
      ContainerDefinitions:
        - Name: flask
          Image: 182399705305.dkr.ecr.eu-north-1.amazonaws.com/flask-repo@sha256:1fde7f1f40161791e6e6e483c0d1fff3108b122c658a260ed060462fe49fd087
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: eu-north-1
              awslogs-stream-prefix: fargate

          PortMappings:
            - ContainerPort: 5000
          Memory: 512
          MemoryReservation: 256
        - Name: redis
          Image: 182399705305.dkr.ecr.eu-north-1.amazonaws.com/redis-repo@sha256:ab74141ad225c99d0257eb89da2661a9e971a338a7047ed532ba5db1e58e4c6f
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: eu-north-1
              awslogs-stream-prefix: fargate
          PortMappings:
            - ContainerPort: 6379
          Memory: 256

  FargateService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref FlaskTaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PublicSubnet
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref FlaskRedisSecurityGroup
  
  FlaskRedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow inbound access to Flask and Redis containers
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0  # Sallii yhteydet kaikilta (julkinäkyvä)
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 10.0.0.0/16  # Vain sisäinen käyttö, esim. jos Redis ei ole julkinen

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/fargate2tasks
      RetentionInDays: 7